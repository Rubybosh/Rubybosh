import tkinter as tk
from tkinter import messagebox

class TicTacToe:
    def __init__(self, master):
        self.master = master
        self.master.title("Tic Tac Toe")
        self.master.geometry("300x360")
        self.create_widgets()
        self.reset_board()

    def create_widgets(self):
        self.buttons = []
        for i in range(3):
            for j in range(3):
                button = tk.Button(self.master, text="", font=("Helvetica", 20), width=6, height=3,
                                   command=lambda row=i, col=j: self.on_click(row, col))
                button.grid(row=i, column=j, padx=5, pady=5)
                self.buttons.append(button)

        self.reset_button = tk.Button(self.master, text="Reset", font=("Helvetica", 12), command=self.reset_game)
        self.reset_button.grid(row=3, column=0, columnspan=3, pady=10)

    def reset_board(self):
        self.board = [" "]*9
        self.current_player = "X"
        self.update_display()

    def on_click(self, row, col):
        index = 3 * row + col
        if self.board[index] == " ":
            self.board[index] = self.current_player
            self.update_display()
            if self.check_winner() or self.is_board_full():
                self.game_over()
            else:
                self.current_player = "O" if self.current_player == "X" else "X"

    def update_display(self):
        for i in range(9):
            self.buttons[i].config(text=self.board[i])

    def check_winner(self):
        win_conditions = [(0, 1, 2), (3, 4, 5), (6, 7, 8), (0, 3, 6), (1, 4, 7), (2, 5, 8), (0, 4, 8), (2, 4, 6)]
        for condition in win_conditions:
            if self.board[condition[0]] == self.board[condition[1]] == self.board[condition[2]] != " ":
                return True
        return False

    def is_board_full(self):
        return " " not in self.board

    def game_over(self):
        if self.check_winner():
            messagebox.showinfo("Game Over", f"Player {self.current_player} wins!")
        else:
            messagebox.showinfo("Game Over", "It's a tie!")
        self.reset_board()

    def reset_game(self):
        self.reset_board()


def main():
    root = tk.Tk()
    root.configure(bg="#3498db")
    app = TicTacToe(root)
    root.mainloop()

if __name__ == "__main__":
    main()
